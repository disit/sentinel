apiVersion: v1
kind: ServiceAccount
metadata:
  name: sentinel-san
  namespace: sumoapps
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sentinel-pv
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes", "configmaps"]
    verbs: ["create", "delete", "list", "get", "patch", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: sumoapps
  name: sentinel-role-name
rules:
  - apiGroups: [""]
    resources: ["pods", "pv", "services", "persistentvolumeclaims", "pods/log"]
    verbs: ["create", "list", "get", "watch", "delete", "update", "patch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["create", "get", "list", "watch", "delete", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sentinel-san-binding
  namespace: sumoapps
subjects:
  - kind: ServiceAccount
    name: sentinel-san
    namespace: sumoapps
roleRef:
  kind: Role
  name: sentinel-role-name
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sentinel-deployment
  name: sentinel-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sentinel-deployment
  template:
    metadata:
      labels:
        app: sentinel-deployment
    spec:
      serviceAccountName: sentinel-san
      containers:
      - env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: admin-log-length
          value: "200"
        - name: default-log-length
          value: "1000"
        - name: requests-timeout
          value: "15000"
        - name: is-master
          value: "true"
        - name: telegram-api-token
          value: replaceme
        - name: telegram-channel
          value: "123456789"
        - name: db-user
          value: root
        - name: db-passwd
          value: cPehkP5bbNJMt6Ao
        - name: db-host
          value: sentineldb
        - name: db-port
          value: "3306"
        - name: smtp-server
          value: change.me.com
        - name: smtp-port
          value: "587"
        - name: sender-email
          value: change@at.me
        - name: sender-email-password
          value: replacethispassword
        - name: email-recipients
          value: '["first_address@to.besent", "second_address@to.besent", "more_addresses@to.besent"]'
        - name: platform-url
          value: http://someurl.com
        - name: platform-explanation
          value: Some information
        - name: load-threshold
          value: "30"    # no sense in k8s
        - name: memory-threshold
          value: "1"     # no sense in k8s
        - name: running_as_kubernetes
          value: "True"  # must be kept as is
        - name: conf_path
          value: "/mnt/data/sentinel/fakeconf/fakeconf" #eg
        - name: cluster-secret
          value: "This is a super secret" #eg
        - name: DB_PASS
          value: passpasspass # uses root password of dashboard database, also shared by other databases (not the best but it's all internal and unexposed)
        - name: namespaces
          value: '["sumoapps", "dashk8stest"]'
        ### for kubernetes envirnoments, this is supposed to be left unset ###
        #- name: is-multi
        #  value: "False"
        image: fabriziomereu/sentinel:v0.1.15
        #command: ["sleep", "3600"]
        name: k8sentinel
        volumeMounts:
        - mountPath: /data/users.txt
          name: sentinel-claim001
        - mountPath: /mnt/data/sentinel/fakeconf
          name: sentinel-claim002
        - mountPath: /app/data
          name: sentinel-claim003
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "4G"
            cpu: "1.0"
      volumes:
      - name: sentinel-claim001
        persistentVolumeClaim:
          claimName: sentinel-claim001
      - name: sentinel-claim002
        persistentVolumeClaim:
          claimName: sentinel-claim002
      - name: sentinel-claim003
        persistentVolumeClaim:
          claimName: sentinel-claim003
---
apiVersion: v1
kind: Service
metadata:
  name: sentinel-service
spec:
  type: NodePort
  ports:
    - name: "9080"
      port: 9080
      nodePort: 32080
      targetPort: 9080
  selector:
    app: sentinel-deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: sentineldb
  name: sentineldb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sentineldb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: sentineldb
    spec:
      containers:
        - env:
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: MYSQL_DATABASE
            value: Dashboard
          - name: MYSQL_PASSWORD
            value: 7fBluEbtiEWZgiJs
          - name: MYSQL_ROOT_PASSWORD
            value: cPehkP5bbNJMt6Ao
          - name: MYSQL_USER
            value: user
          - name: TZ
            value: Europe/Rome
          image: mariadb:10.3
          name: sentineldb
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "1024Mi"
              cpu: "1.0"
          ports:
          - containerPort: 3306
          volumeMounts:
          - mountPath: /docker-entrypoint-initdb.d/z_init.sql
            name: sentineldb-claim001
          - mountPath: /etc/mysql/mariadb.conf.d
            name: sentineldb-claim002
          - mountPath: /var/lib/mysql
            name: sentineldb-claim003
    
      volumes:
      - name: sentineldb-claim001
        persistentVolumeClaim:
          claimName: sentineldb-claim001
      - name: sentineldb-claim002
        persistentVolumeClaim:
          claimName: sentineldb-claim002
      - name: sentineldb-claim003
        persistentVolumeClaim:
          claimName: sentineldb-claim003
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: sentineldb
  name: sentineldb
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: sentineldb
  type: NodePort
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentineldb-claim001
  name: sentineldb-claim001
spec:
  volumeName: sentineldb-claim001
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentineldb-claim002
  name: sentineldb-claim002
spec:
  volumeName: sentineldb-claim002
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentineldb-claim003
  name: sentineldb-claim003
spec:
  volumeName: sentineldb-claim003
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentineldb-claim001
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/out.sql"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentineldb-claim002
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/f1"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentineldb-claim003
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/f2"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentinel-claim001
  name: sentinel-claim001
spec:
  volumeName: sentinel-claim001
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentinel-claim001
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/users.txt"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentinel-claim002
  name: sentinel-claim002
spec:
  volumeName: sentinel-claim002
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentinel-claim002
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/fakeconf"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sentinel-claim003
  name: sentinel-claim003
spec:
  volumeName: sentinel-claim003
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentinel-claim003
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data/sentinel/storedcerts"